package com.chrynan.kapi.openapi

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query
 * parameter), mutual TLS (use of a client certificate), OAuth2â€™s common flows (implicit, password, client credentials
 * and authorization code) as defined in [RFC6749](https://spec.openapis.org/oas/v3.1.0#bib-RFC6749), and
 * [OpenID Connect Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06). Please note that as of 2020,
 * the implicit flow is about to be deprecated by
 * [OAuth 2.0 Security Best Current Practice](https://tools.ietf.org/html/draft-ietf-oauth-security-topics).
 * Recommended for most use cases is Authorization Code Grant flow with PKCE.
 *
 * This object MAY be extended with
 * [Specification Extensions](https://spec.openapis.org/oas/v3.1.0#specificationExtensions).
 *
 * ## Security Scheme Object Example
 *
 * ### Basic Authentication
 *
 * ```json
 * {
 *   "type": "http",
 *   "scheme": "basic"
 * }
 * ```
 *
 * ### API Key
 *
 * ```json
 * {
 *   "type": "apiKey",
 *   "name": "api_key",
 *   "in": "header"
 * }
 * ```
 *
 * ### JWT Bearer
 *
 * ```json
 * {
 *   "type": "http",
 *   "scheme": "bearer",
 *   "bearerFormat": "JWT",
 * }
 * ```
 *
 * ### Implicit OAuth2
 *
 * ```json
 * {
 *   "type": "oauth2",
 *   "flows": {
 *     "implicit": {
 *       "authorizationUrl": "https://example.com/api/oauth/dialog",
 *       "scopes": {
 *         "write:pets": "modify pets in your account",
 *         "read:pets": "read your pets"
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @property [type] **REQUIRED**. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS",
 * "oauth2", "openIdConnect". Applies to any.
 * @property [description] A description for security scheme. [CommonMark syntax](https://spec.commonmark.org/) MAY be
 * used for rich text representation. Applies to any.
 * @property [name] **REQUIRED**. The name of the header, query or cookie parameter to be used. Applies to `apiKey`.
 * @property [inValue] **REQUIRED**. The location of the API key. Valid values are "query", "header" or "cookie".
 * Applies to `apiKey`.
 * @property [scheme] **REQUIRED**. The name of the HTTP Authorization scheme to be used in the Authorization header as
 * defined in [RFC7235](https://spec.openapis.org/oas/v3.1.0#bib-RFC7235). The values used SHOULD be registered in the
 * [IANA Authentication Scheme registry](https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
 * Applies to `http`.
 * @property [bearerFormat] A hint to the client to identify how the bearer token is formatted. Bearer tokens are
 * usually generated by an authorization server, so this information is primarily for documentation purposes. Applies
 * to `http ("bearer")`.
 * @property [flows] **REQUIRED**. An object containing configuration information for the flow types supported. Applies
 * to `oauth2`.
 * @property [openIdConnectUrl] **REQUIRED**. OpenId Connect URL to discover OAuth2 configuration values. This MUST be
 * in the form of a URL. The OpenID Connect standard requires the use of TLS. Applies to `openIdConnect`.
 *
 * @see [OpenApi Specification](https://spec.openapis.org/oas/v3.1.0#security-scheme-object)
 */
@Serializable
data class SecurityScheme(
    @SerialName(value = "type") val type: String,
    @SerialName(value = "description") val description: String? = null,
    @SerialName(value = "name") val name: String? = null,
    @SerialName(value = "in") val inValue: String? = null,
    @SerialName(value = "scheme") val scheme: String? = null,
    @SerialName(value = "bearerFormat") val bearerFormat: String? = null,
    @SerialName(value = "flows") val flows: OAuthFlows? = null,
    @SerialName(value = "openIdConnectUrl") val openIdConnectUrl: String? = null
)
